library(shiny)
runApp()
x <- 0
runApp()
library(shiny)
x <- 0
runApp()
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
install.packages("rchart")
install.packages("Rcpp")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv("path2csv", stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(country:cran, r_arch)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
skip
-(5:20)
-select(XLsize)
-select(X:size)
skip()
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
exit()
quit()
library(swirl)
swirl()
skip()
?
?
quit
exit()
quit()
swirl()
library(swirl)
swirl()
read.csv(path2csv,stringsAsFactors = FALSE)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
skip()
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
mydf
cran
?select
select(cran, ip_id, package, country)
select(cran,5:20)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
quit()
library(swirl)
swirl()
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran,r_version != "NA")
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
View(cran2)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2,package, ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
View(cran3)
View(cran3)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",key = "8e86cb0a2dece43f8504",secret = "13614598d4f3a7c3388b68ae71c194fdff4495ce")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
github_token <- oauth2.0_token(oauth_endpoints("github"), )
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp )
acs
library(swirl)
swirl()
library(dplyr)
cran <- df_tbl(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
View(cran)
View(cran)
by_package
mean(by_package)
summarise(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, prob = 0.99)
top counts <- filter(pack_sum,count > 679)
top_counts <- filter(pack_sum,count > 679)
top_counts
View(top_counts)
arrange(top_counts,count)
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,ip_ad)
top_unique_sorted <- arrange(top_unique,desc(unique()))
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
skip()
add
skip()
skip()
skip()
library(swirl)
swirl()
library(tidy)
library(tidyr)
students
?gather
gather(student,sex,count,-grade)
gather(students,sex,count,-grade)
students2
gather(students2,sex, count())
res <- gather(student2, key, value)
skip()
res
?separate
separate(res,col = sex_class, into = c("sex","class"))
skip()
students3
skip()
?spread
skip()
extract_numeric("class5")
skip()
students4
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
setwd("~/Desktop/files")
# Cleaning a Tidy Data set. This code assumes that you have already download dataset in your present working directory.
# Read data
features <- read.table("features.txt")
activityLabels <- read.table("activity_labels.txt")
subjectTrain <- read.table("subject_train.txt")
xTrain <- read.table("X_train.txt")
yTrain <- read.table("y_train.txt")
subjectTest <- read.table("subject_test.txt")
xTest <- read.table("X_test.txt")
yTest <- read.table("y_test.txt")
# Assign Column Names
colnames(activityLabels)  = c('activityId','activityType')
colnames(subjectTrain)  = "subjectId"
colnames(xTrain) = features[,2]
colnames(yTrain) = "activityId"
colnames(subjectTest)  = "subjectId"
colnames(xTest) = features[,2]
colnames(yTest) = "activityId"
# Combine Data sets
trainingData = cbind(yTrain,subjectTrain,xTrain)
testData = cbind(yTest,subjectTest,xTest)
finalData = rbind(trainingData,testData)
# Extract only the measurements on the mean and standard deviation for each measurement
colNames  = colnames(finalData)
vector <- grepl("activity..",colNames) | grepl("subject..",colNames) | grepl("..mean..",colNames)  | grepl("..sd..",colNames)
finalData = finalData[vector==TRUE]
# Uses descriptive activity names to name the activities in the data set
finalData = merge(finalData,activityLabels,by='activityId',all.x=TRUE)
colNames  = colnames(finalData)
# Appropriately labels the data set with descriptive variable names
colnames(finalData) <- gsub("^t","time", colnames(finalData))
colnames(finalData) <- gsub("^f","frequency", colnames(finalData))
colnames(finalData) <- gsub("^Acc","Accelerometer", colnames(finalData))
colnames(finalData) <- gsub("Gyro", "Gyroscope", colnames(finalData))
colnames(finalData) <- gsub("Mag", "Magnitude", colnames(finalData))
colnames(finalData) <- gsub("BodyBody", "Body", colnames(finalData))
colnames(finalData) <- gsub("\\()", "", colnames(finalData))
colnames(finalData) <- gsub("-std$", "StdDev", colnames(finalData))
colnames(finalData) <- gsub("-mean", "Mean", colnames(finalData))
colnames(finalData) <- gsub("[Gg]ravity)","Gravity", colnames(finalData))
colnames(finalData) <- gsub("([Bb]ody[Bb]ody|[Bb]ody)","Body", colnames(finalData))
colnames(finalData) <- gsub("\\-", "", colnames(finalData))
# Creates a second, independent tidy data set with the average of each variable for each activity and each subject
colNames  = colnames(finalData)
tidyData <- aggregate(. ~ subjectId + activityId, finalData[,-49], mean)
tidyData    = merge(tidyData,activityLabels,by='activityId',all.x=TRUE)
# Write tidy data table
write.table(tidyData, file = "tidyData.txt",row.name=FALSE)
setwd("~/")
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label = T)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
date-time
skip()
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- now()
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now()
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
update(depart, hours = 17, minute = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
>interval
?interval
how_long <- (last_time,arrive)
skip()
as.period(how_long)
stopwatch()
setwd("~/Desktop/exdata")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
View(NEI)
View(SCC)
View(SCC)
mean <- tapply(NEI$Emissions, NEI$year, mean)
Source Classification Code Table (𝚂𝚘𝚞𝚛𝚌𝚎_𝙲𝚕𝚊𝚜𝚜𝚒𝚏𝚒𝚌𝚊𝚝𝚒𝚘𝚗_𝙲𝚘𝚍𝚎.𝚛𝚍𝚜): This table provides a mapping from the SCC digit strings in the Emissions table to the actual name of the PM2.5 source. The sources are categorized in a few different ways from more general to more specific and you may choose to explore whatever categories you think are most useful. For example, source “10100101” is known as “Ext Comb /Electric Gen /Anthracite Coal /Pulverized Coal”.
mean
plot(mean)
hist(mean)
type(mean)
class(mean)
mean[1]
?tapply
plot(tapply(NEI$Emissions, NEI$year, mean))
xnames <- names(tapply(values,index,mean))
xnames <- names(tapply(NEI$Emissions, NEI$year, mean))
axis(1, at=1:length(xnames), labels=xnames)
plot(tapply(NEI$Emissions, NEI$year, mean))
axis(1, at=1:length(xnames), labels=xnames)
?plot
plot(tapply(NEI$Emissions, NEI$year, mean), names = xnames)
plot(xnmaes,tapply(NEI$Emissions, NEI$year, mean))
plot(tapply(NEI$Emissions, NEI$year, mean))
?axis
plot(names(mean),mean)
plot(names(meanpm),meanpm,type="l", xlab = "Year", ylab = expression ("Total" ~ PM[2.5] ~"Emissions (tons)"),
main = expression("Total US" ~ PM[2.5] ~ "Emissions by Year"), col="Purple")
meanpm <- tapply(NEI$Emissions, NEI$year, mean)
plot(names(meanpm),meanpm,type="l", xlab = "Year", ylab = expression ("Total" ~ PM[2.5] ~"Emissions (tons)"),
main = expression("Total US" ~ PM[2.5] ~ "Emissions by Year"), col="Purple")
baltimore <- NRI[fips == "24510",]
baltimore <- NEI[fips == "24510",]
baltimore <- NEI[NEI$fips == "24510",]
View(baltimore)
baltmean <- tapply(baltimore$Emissions, baltimore$year, mean)
plot(names(baltmean),baltmean,type="l", xlab = "Year", ylab = expression ("Total" ~ PM[2.5] ~"Emissions (tons)"),
main = expression("Total US" ~ PM[2.5] ~ "Emissions by Year"), col="Purple")
balt_year_source <- aggregate(Emissions ~ year + type, baltimore, sum)
View(balt_year_source)
bat1 <- aggregate(Emissions ~ year,baltimore,mean )
bat1 <- aggregate(Emissions ~ year,baltimore,mean)
total <- aggregate(Emissions ~ year + type, baltimore, sum)
total <- aggregate(Emissions ~ year, baltimore, sum)
View(total)
total1 <- aggregate(Emissions ~ year, baltimore, sum)
View(total1)
View(total)
total1 <- aggregate(Emissions ~ year, baltimore, mean)
qplot(year, Emissions, data=balt_year_source, color=type, geom ="line") +
ggtitle(expression("Baltimore City" ~ PM[2.5] ~ "Emmission by source, type and year")) +
xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (in tons)"))
library(ggplot2)
baltimore <- NEI[NEI$fips == "24510",]
balt_year_source <- aggregate(Emissions ~ year + type, baltimore, sum)
qplot(year, Emissions, data=balt_year_source, color=type, geom ="line") +
ggtitle(expression("Baltimore City" ~ PM[2.5] ~ "Emmission by source, type and year")) +
xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (in tons)"))
View(SCC)
data <- merge(NEI,SCC,by="SCC")
View(data)
coal = grepl("coal", data$Short.Name, ignore.case=TRUE)
?grepl
coal
coaldata = data[coal,]
g <- ggplot(emission, aes(factor(year), Emissions))
g <- g + geom_bar(stat="identity") +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from coal sources from 1999 to 2008')
print(g)
g <- ggplot(emission, aes(factor(year), Emissions))
data <- merge(NEI,SCC,by="SCC")
coal = grepl("coal", data$Short.Name, ignore.case=TRUE)
coaldata = data[coal,]
emission <- aggregate(Emissions ~ year, coaldata, sum)
g <- ggplot(emission, aes(factor(year), Emissions))
g <- g + geom_bar(stat="identity") +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from coal sources from 1999 to 2008')
print(g)
motor <- NEI[NEI$fips=="24510" & NEI$type=="ON-ROAD",  ]
emission_motor <- aggregate(Emissions ~ year, data, sum)
g <- ggplot(emission_motor, aes(factor(year), Emissions))
g <- g + geom_bar(stat="identity") +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from motor vehicle (type = ON-ROAD) in Baltimore City, Maryland (fips = "24510") from 1999 to 2008')
print(g)
motor <- NEI[(NEI$fips=="24510" | NEI$fips == "06037" & NEI$type=="ON-ROAD", ]
motor <- NEI[(NEI$fips=="24510" | NEI$fips == "06037") & NEI$type=="ON-ROAD", ]
agg <- aggregate(Emissions ~ year + fips, motor, sum)
agg <- aggregate(Emissions ~ year + fips, motor, sum)
agg
agg$fips[agg$fips=="24510"] <- "Baltimore, MD"
agg
agg <- aggregate(Emissions ~ year + fips, motor, sum)
agg
agg$city[agg$fips == "24510"] <- "Baltimore, MD"
agg
agg <- aggregate(Emissions ~ year + fips, motor, sum)
agg$fips[agg$fips=="24510"] <- "Baltimore, MD"
agg$fips[agg$fips=="06037"] <- "Los Angeles, CA"
g <- ggplot(aggregatedTotalByYearAndFips, aes(factor(year), Emissions))
g <- g + facet_grid(. ~ fips)
g <- g + geom_bar(stat="identity")  +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from motor vehicle (type=ON-ROAD) in Baltimore City, MD (fips = "24510") vs Los Angeles, CA (fips = "06037")  1999-2008')
print(g)
g <- ggplot(agg, aes(factor(year), Emissions))
g <- g + facet_grid(. ~ fips)
g <- g + geom_bar(stat="identity")  +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from motor vehicle (type=ON-ROAD) in Baltimore City, MD (fips = "24510") vs Los Angeles, CA (fips = "06037")  1999-2008')
print(g)
motor <- NEI[(NEI$fips=="24510" | NEI$fips == "06037") & NEI$type=="ON-ROAD", ]
agg <- aggregate(Emissions ~ year + fips, motor, sum)
agg$fips[agg$fips=="24510"] <- "Baltimore, MD"
agg$fips[agg$fips=="06037"] <- "Los Angeles, CA"
g <- ggplot(agg, aes(factor(year), Emissions))
g <- g + facet_grid(. ~ fips)
g <- g + geom_bar(stat="identity")  +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from motor vehicle (type=ON-ROAD) in Baltimore City, MD (fips = "24510") vs Los Angeles, CA (fips = "06037")  1999-2008')
print(g)
Storms and other severe weather events can cause both public health and economic problems for communities and municipalities. Many severe events can result in fatalities, injuries, and property damage, and preventing such outcomes to the extent possible is a key concern.
